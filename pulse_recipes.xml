<?xml version="1.0"?>
<project default-recipe="unix_make">
    <!-- this property specifies the binary output directory for the build
         relative to the toplevel of the checkout. It is overridden by 
         recipes that use a multi-configuration CMake generator, like the
         MSVC recipe.-->
    <property name="build.dir" value="${build.root}/${build.type}/"/>

    <!-- this property specifies the relative path from the build.dir
         to the toplevel of the source code -->
    <property name="cmake.source.dir" value="../../"/>

    <property name="test.log.file" value="${build.dir}/Testing/Temporary/LastTest.log"/>
    <!-- postprocessors for the configure phase -->
    <post-processor name="cmake.pp">
        <regex.pp name="cmake_error.pp" trailing-context="10" fail-on-error="false">
            <pattern category="error" expression="^CMake Error"/>
        </regex.pp>
        <regex.pp name="cmake_warning.pp" trailing-context="10">
            <pattern category="warning" expression="CMake Warning"/>
        </regex.pp>
        <regex.pp name="cmake_config_warning.pp">
            <pattern category="warning" expression="^ -- Could NOT find"/>
            <pattern category="warning" expression="- NOT found"/>
        </regex.pp>
    </post-processor>

    <!-- postprocessors for the build phase -->
    <post-processor name="gcc_build.pp">
        <gcc.pp name="gcc.pp"/>
    </post-processor>

    <post-processor name="msvc_build.pp">
        <msbuild.pp name="msbuild.pp"/>
    </post-processor>

    <!-- postprocessors for the test phase -->
    <post-processor name="msvc_test_run.pp">
        <regex.pp name="ctest.pp">
            <pattern category="error"
                     expression=".*\\*\\*\\*(Failed|Exception|Timeout|Bad command)"/>
        </regex.pp>
    </post-processor>

    <post-processor name="make_test_run.pp">
        <regex.pp name="ctest.pp">
            <pattern category="error"
                     expression=".*\\*\\*\\*(Failed|Exception|Timeout|Bad command)"/>
        </regex.pp>
    </post-processor>
    
                   <!--
                   pass-status="OK" failure-status="FAIL"><![CDATA[>>>>>> (.*)\s+\\((.*)\\), (Line .*)$]]></regex-test.pp>
                   -->
    <regex-test.pp name="acunittest.pp"
            status-group="1"
            name-group="2"
            detail-group="3"
            pass-status="OK"
            failure-status="FAIL"><![CDATA[>>>>>> (.*)\s+\\((.*)\\), (Line .*)$]]></regex-test.pp>
    <macro name="handle_testlog">
        <artifact name="Test Output" file="${test.log.file}">
            <process processor="${acunittest.pp}"/>
        </artifact>
    </macro>

    <macro name="run_cmake">
        <executable name="create build dir" exe="cmake" args="-E make_directory ${build.dir}"/>
        <executable name="flush CMakeCache.txt" exe="cmake" working-dir="${build.dir}"
                    args="-E remove CMakeCache.txt"/>
        <command name="configure">
            <executable exe="cmake" working-dir="${build.dir}">
                <arg>-G</arg><arg>${cmake.generator}</arg>
                <arg>-D</arg><arg>CMAKE_VERBOSE_MAKEFILE=1</arg>
                <arg>-D</arg><arg>CMAKE_BUILD_TYPE=${build.type}</arg>
                <arg>${cmake.source.dir}</arg>

                <process processor="${cmake.pp}"/>
            </executable>
        </command>
    </macro>

    <recipe name="GNU Make">
        <property name="cmake.generator" value="Unix Makefiles"/>

        <macro-ref macro="${run_cmake}"/>

        <command name="build">
            <make args="-j ${parallel.jobs} VERBOSE=1" working-dir="${build.dir}">
                <process processor="${gcc_build.pp}"/>
            </make>
        </command>

        <command name="test">
            <make targets="test" working-dir="${build.dir}">
                <process processor="${make_test_run.pp}"/>
            </make>
            <macro-ref macro="${handle_testlog}"/>
        </command>
    </recipe>

    <recipe name="NMake">
        <property name="cmake.generator" value="NMake Makefile"/>
        <!-- TODO: make these agent properties -->
        <property name="vs.root.dir" value="${env.VS90COMNTOOLS}/../../"/>
        <property name="nmake.bin.dir" value="${vs.root.dir}/VC/bin/"/>
        <property name="nmake.bin" value="${nmake.bin.dir}/nmake.exe"/>

        <macro-ref macro="${run_cmake}"/>

        <command name="build">
            <executable exe="${nmake.bin}" working-dir="${build.dir}">
                <process processor="${msvc_build.pp}"/>
            </executable>
        </command>

        <command name="test">
            <executable exe="${nmake.bin}" args="test" working-dir="${build.dir}">
                <process processor="${make_test_run.pp}"/>
            </executable>
            <macro-ref macro="${handle_testlog}"/>
        </command>
    </recipe>

    <recipe name="MSVC">
        <property name="build.dir" value="${build.root}/"/>
        <property name="cmake.source.dir" value="../"/>
        <property name="test.log.file" value="${build.dir}/Testing/Temporary/LastTest.log"/>

        <property name="cmake.generator" value="Visual Studio 9 2008"/>
        <!-- TODO: make these agent properties -->
        <property name="vs.root.dir" value="${env.VS90COMNTOOLS}/../../"/>
        <property name="vcbuild.bin.dir" value="${vs.root.dir}/VC/vcpackages/"/>
        <property name="vcbuild.bin" value="${vcbuild.bin.dir}/vcbuild.exe"/>

        <macro-ref macro="${run_cmake}"/>

        <command name="build">
            <executable exe="${vcbuild.bin}" working-dir="${build.dir}">
                <arg>/M${parallel.jobs}</arg>
                <arg>PRO60.sln</arg>
                <arg>&quot;${build.type}|Win32&quot;</arg>

                <process processor="${msvc_build.pp}"/>
            </executable>
        </command>

        <command name="test">
            <executable exe="${vcbuild.bin}" working-dir="${build.dir}">
                <arg>RUN_TESTS.vcproj</arg>
                <arg>&quot;${build.type}|Win32&quot;</arg>

                <process processor="${msvc_test_run.pp}"/>
            </executable>
            <macro-ref macro="${handle_testlog}"/>
        </command>
    </recipe>
</project>
