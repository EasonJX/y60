struct a2v {
float4 Position : POSITION; 
float3 Normal : NORMAL;     
float4 TexCoord0 : TEXCOORD0;
float4 TexCoord1 : TEXCOORD1;
}; 

struct v2f {
float4 Position : POSITION; 
float2 TexCoord0 : TEXCOORD0;
float2 TexCoord1 : TEXCOORD1;
#ifndef NOSHADOW
float4 TexCoordProj : TEXCOORD2;
#endif
float3 LightDirection : TEXCOORD3;
float3 HalfAngleVector : TEXCOORD4;
}; 


float3 compress(float3 v) {
    return 0.5 * v + 0.5;
}

float3 expand(float3 v) {
    return 2.0 * (v - 0.5);
}

float4 compress(float4 v) {
    return 0.5 * v + 0.5;
}

float4 expand(float4 v) {
    return 2.0 * (v - 0.5);
}

v2f mainVertex(a2v IN,
               uniform float4x4 GL_MODELVIEW_PROJECTION,
               uniform float4 lightPosition, //in object space
               uniform float4 AC_DIRECTIONAL_LIGHTS[],
               uniform float4 texgenparam2[4],
               uniform float3 AC_CAMERA_POSITION
#if (AC_TEXTURE_MATRICES_LENGTH >= 2)
               , uniform float4x4 AC_TEXTURE_MATRICES[]  //in object space 
#endif
)
{ 
    v2f OUT; // pass texture coordinates for

    OUT.Position = mul(GL_MODELVIEW_PROJECTION, IN.Position);
#if (AC_TEXTURE_MATRICES_LENGTH >= 2)
    OUT.TexCoord0 = mul(AC_TEXTURE_MATRICES[0], IN.TexCoord0).xy;
    OUT.TexCoord1 = mul(AC_TEXTURE_MATRICES[1], IN.TexCoord1).xy;
#endif
    OUT.LightDirection.xyz = normalize(lightPosition - IN.Position);
    float3 viewVector = normalize(AC_CAMERA_POSITION - IN.Position.xyz);
    //OUT.HalfAngleVector.xyz = normalize(OUT.LightDirection.xyz + viewVector); // blinntype shading
    OUT.HalfAngleVector.xyz = normalize(viewVector); // blinntype shading

#ifndef NOSHADOW
    OUT.TexCoordProj.x = dot(texgenparam2[0],IN.Position);
    OUT.TexCoordProj.y = dot(texgenparam2[1],IN.Position);
    OUT.TexCoordProj.z = dot(texgenparam2[2],IN.Position);
    OUT.TexCoordProj.w = dot(texgenparam2[3],IN.Position);
#endif

    return OUT;
}

float4 mainFragment(v2f IN,
                    uniform sampler2D ground,
                    uniform sampler2D snow,
#ifndef NOSHADOW
                    uniform sampler2D shadow,
#endif
                    uniform sampler2D normalMap,
                    uniform sampler2D sparkleMap,
                    uniform float4 ambient,
                    uniform float4 diffuse,
                    uniform float4 specular,
                    uniform float shininess
                    ) : COLOR
{ 
    float4 myGroundColor = tex2D(ground, IN.TexCoord0.xy).rgba;
    float4 mySnowColor = tex2D(snow, IN.TexCoord1.xy).rgba;
    float3 myNormal = tex2D(normalMap, IN.TexCoord1.xy).xyz;

#ifndef NOSHADOW
    float4 myShadow = tex2Dproj(shadow, IN.TexCoordProj).rgba;
#endif

    // apply lighting model
    float4 color = myGroundColor;

    myNormal = normalize(expand(myNormal));
    float3 mySparkleNormal = normalize(tex2D(sparkleMap, IN.TexCoord0).xyz);

    float3 myAmbient = ambient.xyz;

    float diffuseLight = max(dot(myNormal, expand(IN.LightDirection)),0);
    float3 myDiffuse = diffuse.xyz * diffuseLight;

    //float specularLight = pow(max(dot(myNormal, expand(IN.HalfAngleVector)),0), shininess);
    float specularLight = pow(max(dot(mySparkleNormal, expand(IN.HalfAngleVector)),0), shininess);
    if (diffuseLight <= 0) specularLight = 0;
    float3 mySpecular = specular.xyz * specularLight;

    color.xyz = ((myAmbient + myDiffuse + mySpecular) * mySnowColor.rgb * mySnowColor.a) + (1-mySnowColor.a)*myGroundColor.rgb;
    color.w = 1;

#ifndef NOSHADOW
    color.xyz = myShadow.a * myShadow.rgb + (1-myShadow.a) * color.xyz;
#endif

    return color;

}

