//=============================================================================
// Copyright (C) 2003-2007 ART+COM AG Berlin
//
// These coded instructions, statements, and computer programs contain
// unpublished proprietary information of ART+COM AG Berlin, and
// are copy protected by law. They may not be disclosed to third parties
// or copied or duplicated in any form, in whole or in part, without the
// specific, prior written permission of ART+COM AG Berlin.
//=============================================================================


struct a2v {
    float4 Position : POSITION; // in object space 
    float4 normal   : NORMAL;   // in object space
    float4 texCoord0 : TEXCOORD0;
    float4 tangent   : TEXCOORD1;
}; 

struct vert2frag {
    float4 homPosition : POSITION;
    float3 texCoord0   : TEXCOORD0;
    float3 tangent     : TEXCOORD4;
    float3 binormal    : TEXCOORD5;
    float3 normal      : TEXCOORD6;
    float3 worldPosition : TEXCOORD7;
}; 


float3 expand(float3 v) {
    return 2.0 * (v - 0.5);
}


vert2frag mainVertex(a2v IN,
        uniform float4x4 GL_MODELVIEW_PROJECTION,
        uniform float4x4 AC_OBJECTWORLD,
        uniform float4x4 AC_OBJECTWORLD_IT
#if (AC_TEXTURE_MATRICES_LENGTH > 0)
    , uniform float4x4 AC_TEXTURE_MATRICES[]
#endif
)
{ 
    vert2frag OUT;

    OUT.homPosition = mul(GL_MODELVIEW_PROJECTION, IN.Position); // ftransform
#if (AC_TEXTURE_MATRICES_LENGTH > 0)
    OUT.texCoord0 = mul(AC_TEXTURE_MATRICES[0], IN.texCoord0).xyz;
#endif
    OUT.worldPosition = mul(AC_OBJECTWORLD, IN.Position).xyz;

    float3 N = normalize(mul(AC_OBJECTWORLD_IT, IN.normal).xyz);
    float3 T = normalize(mul(AC_OBJECTWORLD_IT, IN.tangent).xyz); // tangent
    OUT.tangent = T;
    OUT.binormal = normalize(cross(N,T));
    OUT.normal = N;

    return OUT;
}


float4 mainFragment(vert2frag IN,
#ifdef PAINT
        uniform sampler2D colorMap,
#endif
        uniform sampler2D normalMap,
        uniform float3 AC_CAMERA_POSITION,
        uniform float3 AC_DIRECTIONAL_LIGHTS[],
        uniform float3 AC_DIRECTIONAL_LIGHTS_DIFFUSE_COLOR[],
        uniform float3 AC_DIRECTIONAL_LIGHTS_SPECULAR_COLOR[],
        uniform float3 AC_POSITIONAL_LIGHTS[],
        uniform float3 AC_POSITIONAL_LIGHTS_DIFFUSE_COLOR[],
        uniform float3 AC_POSITIONAL_LIGHTS_SPECULAR_COLOR[],
        uniform float4 ambient,
        uniform float4 diffuse,
        uniform float4 specular,
        uniform float shininess) : COLOR
{
    float4 myColor = ambient;
    myColor.a += diffuse.a + specular.a;

    float3x3 TBN = float3x3(IN.tangent, IN.binormal, IN.normal);

#ifdef PAINT
    float4 myTexColor = tex2D(colorMap, IN.texCoord0);
#endif
    float4 Ntex = tex2D(normalMap, IN.texCoord0);
    float3 N = normalize(expand(Ntex.rgb));
    float3 P = IN.worldPosition;
    float3 V = normalize(AC_CAMERA_POSITION - P);

    float3 L;
    float diffuseTerm, specularTerm;

    /*
     * directional light
     */
    for (int i = 0; i < AC_DIRECTIONAL_LIGHTS.length; ++i) {

        L = mul(TBN, AC_DIRECTIONAL_LIGHTS[i]);
        diffuseTerm = saturate(dot(L, N));
        myColor.rgb += diffuse.rgb * AC_DIRECTIONAL_LIGHTS_DIFFUSE_COLOR[i] * diffuseTerm;

        if (diffuseTerm > 0.0) {
            float3 R = 2 * dot(N, L) * N - L;
            specularTerm = pow(max(dot(R, V), 0), shininess);
            myColor.rgb += specular.rgb * AC_DIRECTIONAL_LIGHTS_SPECULAR_COLOR[i] * specularTerm;
        }
    }

    /*
     * positional light
     */
    for (int i = 0; i < AC_POSITIONAL_LIGHTS.length; ++i) {
        L = normalize(mul(TBN, AC_POSITIONAL_LIGHTS[i] - P));
        diffuseTerm = saturate(dot(L, N));
        myColor.rgb += diffuse.rgb * AC_POSITIONAL_LIGHTS_DIFFUSE_COLOR[i] * diffuseTerm;

        if (diffuseTerm > 0.0) {
            float3 R = 2 * dot(N, L) * N - L;
            specularTerm = pow(max(dot(R, V), 0), shininess);
            myColor.rgb += specular.rgb * AC_POSITIONAL_LIGHTS_SPECULAR_COLOR[i] * specularTerm;
        }
    }

#ifdef PAINT
    // blend with base texture
    myColor *= myTexColor; // MODULATE
#endif

    // modulate with normalmap alpha
    myColor *= Ntex.a;

    return myColor;
}
