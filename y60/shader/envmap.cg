//=============================================================================
// Copyright (C) 2003-2007 ART+COM AG Berlin
//
// These coded instructions, statements, and computer programs contain
// unpublished proprietary information of ART+COM AG Berlin, and
// are copy protected by law. They may not be disclosed to third parties
// or copied or duplicated in any form, in whole or in part, without the
// specific, prior written permission of ART+COM AG Berlin.
//=============================================================================


// texture coordinates
#ifdef OCCLUSION
    #define OCCLUSION_TEXCOORD TEXCOORD0
#ifdef PAINT
    #define PAINT_TEXCOORD     TEXCOORD1
#if PAINT==2
    #define PAINT2_TEXCOORD    TEXCOORD2
#endif
#endif
#else // WITHOUT OCCLUSION
#ifdef PAINT
    #define PAINT_TEXCOORD  TEXCOORD0
#if PAINT==2
    #define PAINT2_TEXCOORD TEXCOORD1
#endif
#endif
#endif // OCCLUSION


struct app2vert {
    float4 Position         : POSITION;
    float4 Normal           : NORMAL;
#ifdef OCCLUSION
    float2 occlusionTexCoord : OCCLUSION_TEXCOORD;
#endif
#ifdef PAINT
    float2 paintTexCoord   : PAINT_TEXCOORD;
#if PAINT==2
    float2 paint2TexCoord  : PAINT2_TEXCOORD;
#endif
#endif
};


struct vert2frag {
    float4 homPosition   : POSITION;
#ifdef OCCLUSION
    float2 occlusionTexCoord : OCCLUSION_TEXCOORD;
#endif
#ifdef PAINT
    float2 paintTexCoord  : PAINT_TEXCOORD;
#if PAINT==2
    float2 paint2TexCoord : PAINT2_TEXCOORD;
#endif
#endif
    float3 worldPosition : TEXCOORD3;
    float3 worldNormal   : TEXCOORD4;
    float3 reflectVector : TEXCOORD5;
    float3 refractVector : TEXCOORD6;
};


vert2frag mainVertex(app2vert IN,
        uniform float4x4 GL_MODELVIEW_PROJECTION,
        uniform float4x4 AC_OBJECTWORLD_IT,
        uniform float4x4 AC_OBJECTWORLD,
        uniform float3 AC_CAMERA_POSITION
        )
{
    vert2frag OUT;

    OUT.homPosition = mul(GL_MODELVIEW_PROJECTION, IN.Position);

    float3 myWorldPosition = mul(AC_OBJECTWORLD, IN.Position).xyz;
    float3 myWorldNormal = normalize(mul(AC_OBJECTWORLD_IT, IN.Normal).xyz);
    float3 myViewVector = normalize(myWorldPosition - AC_CAMERA_POSITION);

    OUT.worldPosition = myWorldPosition.xyz;
    OUT.worldNormal = myWorldNormal;

    OUT.reflectVector = reflect(myViewVector, myWorldNormal);
    OUT.reflectVector.z = -OUT.reflectVector.z; // inside-out transformation
#ifdef YFLIP
    OUT.reflectVector.y = -OUT.reflectVector.y; // needed for dynamic cubemaps
#endif

#ifdef OCCLUSION
    OUT.occlusionTexCoord = IN.occlusionTexCoord;
#endif
#ifdef PAINT
    OUT.paintTexCoord = IN.paintTexCoord;
#if PAINT==2
    OUT.paint2TexCoord = IN.paint2TexCoord;
#endif
#endif

    return OUT;
}


float4 mainFragment(vert2frag   IN,
#ifdef OCCLUSION
        uniform sampler2D occlusionTex,
#endif
#ifdef PAINT
        uniform sampler2D decalTex,
#if PAINT==2
        uniform sampler2D emissiveTex,
#endif
#endif
        uniform samplerCUBE envTex,
        uniform float3 AC_CAMERA_POSITION,
        uniform float3 AC_DIRECTIONAL_LIGHTS[],
        uniform float4 AC_DIRECTIONAL_LIGHTS_SPECULAR_COLOR[],
        uniform float3 AC_POSITIONAL_LIGHTS[],
        uniform float4 AC_POSITIONAL_LIGHTS_SPECULAR_COLOR[],
        uniform float4 ambient,
        uniform float4 diffuse,
        uniform float4 specular,
#ifdef PHONG_SPECULAR        
        uniform float shininess,
#else
        uniform float eccentricity,
        uniform float specularrolloff,
#endif        
        uniform float reflectivity
        ) : COLOR
{
#ifdef OCCLUSION
    float4 myOcclusionTexel = tex2D(occlusionTex, IN.occlusionTexCoord);
#endif

    float4 myBaseColor;
#ifdef PAINT
    myBaseColor = tex2D(decalTex, IN.paintTexCoord);
#if PAINT==2
    float4 myBaseColor2 = tex2D(emissiveTex, IN.paint2TexCoord);
    myBaseColor *= myBaseColor2; // modulate
#endif
    myBaseColor *= diffuse;
#else
    myBaseColor = diffuse;
#endif

    float3 myEnvTexel = texCUBE(envTex, IN.reflectVector).rgb * reflectivity;

    float4 myLightDiffuse = float4(0,0,0,0);
    float4 myLightSpecular = float4(0,0,0,0);

    float3 P = IN.worldPosition;
    float3 N = normalize(IN.worldNormal);
    float3 V = normalize(AC_CAMERA_POSITION - P);

    for (int i = 0; i < AC_DIRECTIONAL_LIGHTS.length; ++i) {
        float3 L = normalize(AC_DIRECTIONAL_LIGHTS[i]);

        // diffuse term
        float diffuseTerm = max(dot(N,L),0);
        myLightDiffuse += AC_DIRECTIONAL_LIGHTS_SPECULAR_COLOR[i] * diffuseTerm;

        // specular term
#ifdef LIGHTING_TWOSIDED
        {
#else
        if (diffuseTerm > 0.0) {
#endif
#ifdef PHONG_SPECULAR
            float3 R = 2 * dot(N, L) * N - L;
            float specularTerm = pow(max(dot(R, V), 0), shininess);
#else
            float3 H = normalize(L + V);
            float specularTerm = 2.5 * specularrolloff * pow(max(dot(N, H), 0), 1/pow(eccentricity,2.5));
#endif
            myLightSpecular += specularTerm * AC_DIRECTIONAL_LIGHTS_SPECULAR_COLOR[i];
        }
    }

    for (int i = 0; i < AC_POSITIONAL_LIGHTS.length; ++i) {

        float3 L = normalize(AC_POSITIONAL_LIGHTS[i] - P);

        // diffuse term
        float diffuseTerm = max(dot(N,L),0);
        myLightDiffuse += AC_POSITIONAL_LIGHTS_SPECULAR_COLOR[i] * diffuseTerm;

        // specular term
#ifdef LIGHTING_TWOSIDED
        {
#else
        if (diffuseTerm > 0.0) {
#endif
#ifdef PHONG_SPECULAR
            float3 R = 2 * dot(N, L) * N - L;
            float specularTerm = pow(max(dot(R, V), 0), shininess);
#else
            float3 H = normalize(L + V);
            float specularTerm = 2.5 * specularrolloff * pow(max(dot(N, H), 0), 1/pow(eccentricity, 2.5));
#endif
            myLightSpecular += specularTerm * AC_POSITIONAL_LIGHTS_SPECULAR_COLOR[i];
        }
    }

    float4 myBlendColor;
    myBlendColor = ambient + myLightDiffuse * myBaseColor + myLightSpecular * specular;

    myBlendColor = float4(myBlendColor.rgb * myBaseColor.a + myEnvTexel, myBaseColor.a);
#ifdef OCCLUSION
    myBlendColor.rgb *= myOcclusionTexel.rgb;
#endif

    return myBlendColor;
    
}
