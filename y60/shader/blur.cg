//=============================================================================
// Copyright (C) 2005 ART+COM AG Berlin
//
// These coded instructions, statements, and computer programs contain
// unpublished proprietary information of ART+COM AG Berlin, and
// are copy protected by law. They may not be disclosed to third parties
// or copied or duplicated in any form, in whole or in part, without the
// specific, prior written permission of ART+COM AG Berlin.
//=============================================================================


struct vert2frag {
    float4 position : POSITION;
    float2 texCoord : TEXCOORD0;
};

vert2frag mainVertex(float4 thePosition : POSITION,
                     float4 theTexCoord : TEXCOORD0,
                     uniform float4x4 GL_MODELVIEW_PROJECTION,
                     uniform float4x4 GL_TEXTURE)
{
    vert2frag OUT;
    OUT.position = mul(GL_MODELVIEW_PROJECTION, thePosition);
    OUT.texCoord = mul(GL_TEXTURE, theTexCoord).xy;
    return OUT;
}

float4 mainFragment(vert2frag IN,
                    uniform float3 texelSize,
                    uniform float kernelSize,
                    uniform float blurKernelTexSize,
                    uniform sampler2D tex,
                    uniform sampler2D blurKernel) : COLOR 
{
    float halfKernelSize = (kernelSize-1) * 0.5;
    float2 myTexCoord = float2(IN.texCoord);
    int myKernelSize = int(kernelSize);
    float3 myOutColor = float3(0,0,0);
    if( texelSize.z > 0.0 ) {
        // blur Y
        for (int i = 0; i < myKernelSize; ++i) {
            int myOffset = i - halfKernelSize;
            float2 sampleCoord = float2( i/ blurKernelTexSize, 0.5); 
            myTexCoord.y = IN.texCoord.y + (myOffset*texelSize.y);
            float3 myColor = tex2D(tex, myTexCoord).rgb;
            float myValue = tex2D(blurKernel, sampleCoord).r;
            myOutColor.rgb += myColor * myValue;
        }
    } else { 
        // blur X
        for (int i = 0; i < myKernelSize; ++i) {
            int myOffset = i - halfKernelSize;
            myTexCoord.x = IN.texCoord.x + (myOffset*texelSize.x);
            float2 sampleCoord = float2( i/ blurKernelTexSize, 0.5);           
            float4 myTexValues = tex2D(tex, myTexCoord);
            float myValue = tex2D(blurKernel, sampleCoord).r;
            myOutColor.rgb += myTexValues.rgb * myValue;
        }
    }

    return float4(myOutColor.rgb, 1.0); 
} 

