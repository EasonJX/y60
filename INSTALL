INSTALLATION INSTRUCTIONS
=========================

We are currently working on a new CMake based build system. Because the toplevel
Makefile is still missing, it is necessary to trigger a couple of sub-builds by
Hand. The required CMake version is 2.6.

Dependencies:
=============
There are alot of them. On Linux and Mac OS X this should not be a problem. Most
of them are pretty common and they should come with your distro. On Mac OS they
can be installed using ports/fink or somesuch.

    - libpng
    - libtiff
    - libjpeg
    - lib(un)gif
    - OpenEXR
    - glib
    - ffmpeg (svn revision 12506; can be found [ROOT]/extern/common)
    - libcurl
    - gtkmm
    - gtkglext
    - libsdl

There are also a couple of other third party libraries that currently come with
the distribution:
    - spidermonkey
    - libsdlttf
    - paintlib

They come with custom CMake build files and will be build automaticly with 
the rest of Y60.

Installation:
=============

2. Create an arbitray directory for your out-of-source build:
    
        $ mkdir y60build
    
3. Setup the build system:

        $ cd y60build 
        $ cmake -DCMAKE_BUILD_TYPE=RELEASE [ROOT]/src/

   The default install prefix is '/usr/local'. To change that add the 
   following option:

        -DCMAKE_INSTALL_PREFIX=/some/other/directory
   
   On Windows you can choose to create either Visual Studio build files by adding
        -G "Visual Studio 9 2008"
   to the command line or if you prefer nmake makefiles
        -G "NMake Makefiles"
   On Mac OS X
        -G "Xcode"
   will generate XCode project files.

   If you want a debug build set:
        -DCMAKE_BUILD_TYPE=DEBUG

   Now build the source by invoking

        $ make

   ...vcbuild.exe, nmake, xcode or whatever your build tool might be and have 
   coffee. After the build is finished run your build tool equivalent of

        $ make install



Known Issues:
=============

 * Gathering the dependencies on Windows is a nightmare. There is a (bash)
   script that might help a bit:

        $ [ROOT]/build/bin/install_externals [ROOT]/extern <DST>

    However it's more than a little kludgy and your mileage might vary.

 * On Mac OS X CMake currently repeates the following error many times:

        CMake Internal Error (please report a bug) in y60/CMakeLists.txt:
        GetLibraryNamesInternal called on imported target: spidermonkey

   However, the resulting Makefiles seem to work Ok.


