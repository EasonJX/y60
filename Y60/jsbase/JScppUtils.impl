//=============================================================================
// Copyright (C) 1993-2005, ART+COM AG Berlin
//
// These coded instructions, statements, and computer programs contain
// unpublished proprietary information of ART+COM AG Berlin, and
// are copy protected by law. They may not be disclosed to third parties
// or copied or duplicated in any form, in whole or in part, without the
// specific, prior written permission of ART+COM AG Berlin.
//=============================================================================

#include <asl/dom/Value.h>

namespace jslib {

template <class T>
jsval as_jsval(JSContext *cx, const std::vector<T> & theVector) {
    JSObject * myReturnObject = JS_NewArrayObject(cx, 0, NULL);
    for (unsigned i = 0; i < theVector.size(); ++i) {
        jsval myValue = as_jsval(cx, theVector[i]);
        if (!myValue || !JS_SetElement(cx, myReturnObject, i, &myValue)) {
            return JS_FALSE;
        }
    }
    return OBJECT_TO_JSVAL(myReturnObject);
}

template <class T>
bool convertFrom(JSContext *cx, jsval theValue, std::vector<T> & theDest) {
    if (JSVAL_IS_OBJECT(theValue)) {
        JSObject * myArgument;
        if (JS_ValueToObject(cx, theValue, &myArgument)) {
            jsuint myArrayLength = 0;
            if (JS_HasArrayLength(cx,myArgument,&myArrayLength)) {
                theDest.resize(myArrayLength);
                jsval myArgElem;
                for (int i = 0; i < myArrayLength; ++i) {
                    if (JS_GetElement(cx, myArgument, i, &myArgElem)) {
                        T myResult;
                        if (convertFrom(cx, myArgElem, myResult)) {
                            theDest[i] = myResult;
                        } else {
                            return false;
                        }
                    } else {
                        return false;
                    }
                }
                return true;
            }
        }
    }
    return false;
}

}
/* vim: set filetype=cpp : */
