//=============================================================================
// Copyright (C) 2003 ART+COM AG Berlin
//
// These coded instructions, statements, and computer programs contain
// unpublished proprietary information of ART+COM AG Berlin, and
// are copy protected by law. They may not be disclosed to third parties
// or copied or duplicated in any form, in whole or in part, without the
// specific, prior written permission of ART+COM AG Berlin.
//=============================================================================

struct vert2frag {
    float4 position  : POSITION;
    float2 texCoord0 : TEXCOORD0;
};

vert2frag mainVertex(float4 thePosition  : POSITION,
                     float4 theTexCoord0 : TEXCOORD0,
                     uniform float4x4 GL_MODELVIEW_PROJECTION,
                     uniform float4x4 GL_TEXTURE)
{
    vert2frag OUT;
    OUT.position  = mul(GL_MODELVIEW_PROJECTION, thePosition);
    OUT.texCoord0 = mul(GL_TEXTURE, theTexCoord0).xy;

    return OUT;
}

float4 mainFragment(vert2frag IN,
                    uniform sampler2D tex0,
                    uniform sampler2D tex1) : COLOR
{
    float4 myScaledColor   = tex2D(tex0, float2(IN.texCoord0.x, 1-IN.texCoord0.y));
    float4 myOriginalImage = tex2D(tex1, float2(IN.texCoord0.x, 1-IN.texCoord0.y));
    
    myScaledColor += float4(myOriginalImage.rgb, 0.0);
    myScaledColor *= 0.6;
    myScaledColor *= float4(0.30, 0.59, 0.11, 1.0);  

    float myStripes = sin(IN.texCoord0.g*4000.0);
    
    float myLuminance = 1 - (myScaledColor.r + myScaledColor.g + myScaledColor.b);
    float4 myReturn = float4(myLuminance, myLuminance, myLuminance+0.05, 1.0) * 1.4 - float4(1.0, 1.0, 1.0, 0.0) + float4(float3(myScaledColor.a*1.5), 0.0); 
    return myReturn + (myStripes * 0.015 + 0.015);
}

