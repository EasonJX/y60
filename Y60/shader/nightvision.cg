//=============================================================================
// Copyright (C) 2003 ART+COM AG Berlin
//
// These coded instructions, statements, and computer programs contain
// unpublished proprietary information of ART+COM AG Berlin, and
// are copy protected by law. They may not be disclosed to third parties
// or copied or duplicated in any form, in whole or in part, without the
// specific, prior written permission of ART+COM AG Berlin.
//=============================================================================

struct vert2frag {
    float4 position  : POSITION;
    float2 texCoord0 : TEXCOORD0;
};

vert2frag mainVertex(float4 thePosition  : POSITION,
                     float4 theTexCoord0 : TEXCOORD0,
                     uniform float4x4 GL_MODELVIEW_PROJECTION,
                     uniform float4x4 GL_TEXTURE)
{
    vert2frag OUT;
    OUT.position  = mul(GL_MODELVIEW_PROJECTION, thePosition);
    OUT.texCoord0 = mul(GL_TEXTURE, theTexCoord0).xy;

    return OUT;
}

float4 contrast(float4 theColor, float theScale, float theOffset) {
    return theColor * theScale - float4(theOffset, theOffset, theOffset, 0);
}

float4 mainFragment(vert2frag IN,
                    uniform sampler2D tex0,
                    uniform sampler2D tex1) : COLOR
{
    float4 myScaledColor   = tex2D(tex0, float2(IN.texCoord0.x, 1-IN.texCoord0.y));
    float4 myOriginalColor = tex2D(tex1, float2(IN.texCoord0.x, 1-IN.texCoord0.y));

    // red channel is fog/background
    float myLuminance = (myScaledColor.g + myScaledColor.b) / 2.0;
    float myOriginalLuminance = (myOriginalColor.r + myOriginalColor.g + myOriginalColor.b) / 3.0;

    float myHeat = myLuminance * myScaledColor.a - myOriginalLuminance * 0.01 + 0.25;
    float4 myReturn = float4(myHeat, myHeat, myHeat+0.05, 0.0);

    myReturn += float4(lerp(0.4, 0.1, myScaledColor.r) + myOriginalLuminance * 0.75);
    myReturn = contrast(myReturn, 1.4, 0.5);

    float myStripes = sin(IN.texCoord0.g * 4000.0) * 0.015 + 0.015;
    myReturn += float4(myStripes);

    myReturn.a = 1.0;
    return myReturn;
}
