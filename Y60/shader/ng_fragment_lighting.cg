//=============================================================================
// Copyright (C) 2003 ART+COM AG Berlin
//
// These coded instructions, statements, and computer programs contain
// unpublished proprietary information of ART+COM AG Berlin, and
// are copy protected by law. They may not be disclosed to third parties
// or copied or duplicated in any form, in whole or in part, without the
// specific, prior written permission of ART+COM AG Berlin.
//=============================================================================
//  Description: vertex based lighting for nightgrinders
//=============================================================================

#define DIRECTIONAL_LIGHT_COUNT 1
#define POSITIONAL_LIGHT_COUNT  1

struct app2vert {
    float3 Position  : POSITION;
    float3 Normal    : NORMAL;
    float4 texCoord0 : TEXCOORD0;
    float4 texCoord1 : TEXCOORD1;
#ifdef HAS_LIGHTMAP
    float4 texCoord2 : TEXCOORD2;
#endif
};

struct vert2frag {
    float4 homPosition    : POSITION;
    float4 primColor      : COLOR0;
    float2 texCoord0      : TEXCOORD0;
    float2 texCoord1      : TEXCOORD1;
#ifdef HAS_LIGHTMAP
    float2 texCoord2      : TEXCOORD2;
#endif
    float3 objectPosition : TEXCOORD3;
    float3 objectNormal   : TEXCOORD4;
};

vert2frag mainVertex(app2vert IN,
                     uniform float4x4 GL_MODELVIEW_PROJECTION,
                     uniform float4x4 AC_TEXTURE_MATRICES[3]
                     )
{
    vert2frag OUT;

    OUT.texCoord0 = mul(AC_TEXTURE_MATRICES[0], IN.texCoord0).xy;
    OUT.texCoord1 = mul(AC_TEXTURE_MATRICES[1], IN.texCoord1).xy;
#ifdef HAS_LIGHTMAP
    OUT.texCoord2 = mul(AC_TEXTURE_MATRICES[2], IN.texCoord2).xy;
#endif

    // compute position
    OUT.homPosition    = mul(GL_MODELVIEW_PROJECTION, float4(IN.Position, 1));
    OUT.objectPosition = IN.Position;
    OUT.objectNormal   = IN.Normal;

    return OUT;
}

float4 mainFragment(vert2frag IN,
                    uniform sampler2D tex0,
                    uniform sampler2D tex1,
#ifdef HAS_LIGHTMAP
                    uniform sampler2D tex2,
#endif
                    uniform float3 AC_POSITIONAL_LIGHTS[],
                    uniform float4x4 AC_OBJECTWORLD,
                    uniform float4x4 AC_OBJECTWORLD_IT,
                    uniform float2 nearFar
                    ): COLOR
{
    float near = nearFar.x; // 30.0f;
    float far  = nearFar.y; //20.0f;

    float4 color0 = tex2D(tex0, IN.texCoord0);
    float4 color1 = tex2D(tex1, IN.texCoord1);

#ifdef HAS_LIGHTMAP
    float4 myLightmap = tex2D(tex2, IN.texCoord2);
#endif
    float4 myDiffuse = float4(0.0f, 0.0f, 0.0f, 1.0f);
    float4 myDiffuse2 = float4(0.0f, 0.0f, 0.0f, 1.0f);

    float3 myWorldPosition = mul(AC_OBJECTWORLD, float4(IN.objectPosition,1)).xyz;
    float3 myWorldNormal = normalize(mul(AC_OBJECTWORLD_IT, float4(IN.objectNormal,1)).xyz);

    // positional lights
    float myLightDistance = 0.0f;
    for(int i = 0; i < AC_POSITIONAL_LIGHTS.length ; ++i) {
        myLightDistance = distance((AC_POSITIONAL_LIGHTS[i]).xyz, IN.objectPosition.xyz + float3(-515.0,37.0,0.0));

        float3 myLightPosition = AC_POSITIONAL_LIGHTS[i] - myWorldPosition;
        float3 posLightDirection = normalize(myLightPosition);
        myDiffuse2 += max(0, dot(myWorldNormal, posLightDirection)) * 1.0f;
    }

    if (myLightDistance >= near) {
        myDiffuse = float4(1.0f, 1.0f, 1.0f, 1.0f);
    } else if (myLightDistance <= far) {
        myDiffuse = float4(0.0f, 0.0f, 0.0f, 1.0f);
        myDiffuse.w = 1.0f;
    } else {
        myDiffuse = float4( (lerp( myDiffuse, 1.0, (myLightDistance-far) / (near - far))).xxx, 1.0);
    }

//     myDiffuse *= myDiffuse2;

    float4 myReturn = myDiffuse*color1*myLightmap
                        + myDiffuse*color1*0.7f
                        + (float4(1.0f)-myDiffuse)*color0;

    return myReturn;
}
