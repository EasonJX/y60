//=============================================================================
// Copyright (C) 2005 ART+COM AG Berlin
//
// These coded instructions, statements, and computer programs contain
// unpublished proprietary information of ART+COM AG Berlin, and
// are copy protected by law. They may not be disclosed to third parties
// or copied or duplicated in any form, in whole or in part, without the
// specific, prior written permission of ART+COM AG Berlin.
//=============================================================================

struct vert2frag {
    float4 position : POSITION;
    float time      : TEXCOORD1;
    float pointSize : PSIZE;
}; 

vert2frag mainVertex(float4 thePosition   : POSITION,
                     float4 theDirection  : TEXCOORD1,
                     float4 theParameters : TEXCOORD2,
                     float pointSizeIn    : PSIZE,
                     uniform float4x4 GL_MODELVIEW_PROJECTION,
                     uniform float4x4 GL_TEXTURE,
                     uniform float4 gravity,
                     uniform float time,
                     uniform float stoptime,
                     uniform float timetolive,
                     uniform float3 size)
{
    // theParameters.x = the lifetime of a particle
    // theParameters.y = the size of a particle
    // float myTimeToLive = theParameters.x;
    float mySize       = theParameters.y;
    float mySpeed      = theParameters.z;

    vert2frag OUT;
    
    // gravity -> x,y,z direction, w strength
    // calculate the current position of the particle using 
    // theTime.x -> frametime in seconds
    float myStartTime = theDirection.w * timetolive;    
    float myPresentTime = myStartTime + time;
    float myStopTime    = myStartTime + stoptime;

    // wrap around
    if (myPresentTime > timetolive) {
        float myOvertime = myPresentTime / timetolive;
        float myFloor = floor(myOvertime);
        myPresentTime -= timetolive*myFloor;
    
        float myStopFloor = floor(myStopTime / timetolive);
        if (myFloor > myStopFloor) {
            myPresentTime = -1;
        }
    } 

    float4 myPosition = thePosition;
    
    if ( myPresentTime <= 0 ) {
        // set particle to graveyard
        //float4 theNewPosition = float4(4000.0, 4000.0, 4000.0, 4000.0);
        //mul(GL_MODELVIEW_PROJECTION, theNewPosition);
        OUT.position = float4(0,0,1,1); 
    } else { 
        // calculate particle position
        myPosition += float4(theDirection.xyz, 0.0f) * mySpeed * myPresentTime +
            0.5*gravity*myPresentTime*myPresentTime;
        
        OUT.position = mul(GL_MODELVIEW_PROJECTION, myPosition);
    }

    OUT.time.x = myPresentTime / timetolive;

    float normZ = 1.0-(OUT.position.z / OUT.position.w);

    // size.x = size, y=quad, z=lin
    OUT.pointSize = size.x + size.x*size.y*normZ + size.x*size.z*(normZ*normZ) ;

    if (OUT.pointSize < size.y ) OUT.pointSize = size.y;
    if (OUT.pointSize > size.z ) OUT.pointSize = size.z;
    
    return OUT;
}

void mainFragment( vert2frag IN,
                   float4 texCoord0 : TEXCOORD0,
                   float4 theParameters : TEXCOORD2,
                   uniform sampler3D tex, 
                   out float4 outColor : COLOR)
{
    float mySlice = IN.time.x;
    outColor = tex3D(tex, float3(texCoord0.xy, mySlice));
} 
