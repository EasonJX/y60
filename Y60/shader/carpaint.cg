//=============================================================================
// Copyright (C) 2003-2006 ART+COM AG Berlin
//
// These coded instructions, statements, and computer programs contain
// unpublished proprietary information of ART+COM AG Berlin, and
// are copy protected by law. They may not be disclosed to third parties
// or copied or duplicated in any form, in whole or in part, without the
// specific, prior written permission of ART+COM AG Berlin.
//=============================================================================

#define FRESNEL_POWER  1.0
#define FRESNEL_SCALE  0.8
#define FRESNEL_BIAS   0.2

#define LIGHTING

//#define PHONG_SPECULAR // use Phong instead of Blinn specular term
//#define POSITIONAL_LIGHTS

struct app2vert {
    float4 Position         : POSITION;
    float4 Normal           : NORMAL;
    float2 texCoord0        : TEXCOORD0;
};

struct vert2frag {
    float4 homPosition   : POSITION;
#ifdef OCCLUSION    
    float2 texCoord0     : TEXCOORD0;
#endif
    float3 worldPosition : TEXCOORD2;
    float3 worldNormal   : TEXCOORD3;
    float3 reflectVector : TEXCOORD4;
    float3 refractVector : TEXCOORD5;
    float4 lighting      : TEXCOORD6;
    float4 primaryColor    : COLOR0;
    float reflectionFactor : COLOR1;
};

vert2frag mainVertex(app2vert IN,
        uniform float4x4 GL_MODELVIEW_PROJECTION,
        uniform float4x4 AC_OBJECTWORLD_IT,
        uniform float4x4 AC_OBJECTWORLD,
        uniform float3 AC_CAMERA_POSITION,
        uniform float4 diffuse,
        uniform float reflectivity
        )
{
   vert2frag OUT;

    OUT.homPosition = mul(GL_MODELVIEW_PROJECTION, IN.Position);

    float3 myWorldPosition = mul(AC_OBJECTWORLD, IN.Position).xyz;
    float3 myWorldNormal = normalize(mul(AC_OBJECTWORLD_IT, IN.Normal).xyz);
    float3 myViewVector = normalize(myWorldPosition - AC_CAMERA_POSITION);

    OUT.worldPosition = myWorldPosition.xyz;
    OUT.worldNormal = myWorldNormal;

    OUT.reflectVector = reflect(myViewVector, myWorldNormal);
    OUT.reflectVector.z = -OUT.reflectVector.z; // inside-out transformation
#ifdef OCCLUSION
    OUT.texCoord0    = IN.texCoord0;
#endif    
    OUT.primaryColor = diffuse;
    OUT.reflectionFactor = (FRESNEL_BIAS + FRESNEL_SCALE *
        pow(1+dot(myViewVector, myWorldNormal), FRESNEL_POWER)) * reflectivity;

    return OUT;
}


float4 mainFragment(vert2frag   IN,
#ifdef OCCLUSION
        uniform sampler2D occlusionTex,
#endif
        uniform samplerCUBE envTex,
        uniform samplerCUBE emissiveEnvTex,
        uniform float3 AC_CAMERA_POSITION,
        uniform float3 AC_DIRECTIONAL_LIGHTS[],
        uniform float4 AC_DIRECTIONAL_LIGHTS_DIFFUSE_COLOR[],
        uniform float4 AC_DIRECTIONAL_LIGHTS_SPECULAR_COLOR[],
#ifdef POSITIONAL_LIGHTS
        uniform float3 AC_POSITIONAL_LIGHTS[],
        uniform float4 AC_POSITIONAL_LIGHTS_DIFFUSE_COLOR[],
        uniform float4 AC_POSITIONAL_LIGHTS_SPECULAR_COLOR[],
#endif
        uniform float4 ambient,
        uniform float4 diffuse,
        uniform float4 specular,
#ifdef PHONG_SPECULAR
        uniform float shininess
#else
        uniform float eccentricity,
        uniform float shininess,
        uniform float specularrolloff
#endif
        ) : COLOR
{
    float4 myEnvTexel       = texCUBE(envTex, IN.reflectVector);
    float4 myEmissiveTexel  = texCUBE(emissiveEnvTex, IN.reflectVector);

    float4 myDiffuseColor   = float4(0,0,0,0);
    float4 mySpecColor      = float4(0,0,0,0);

#ifdef LIGHTING
    float3 P = IN.worldPosition;
    float3 N = normalize(IN.worldNormal);
    float3 V = normalize(AC_CAMERA_POSITION - P);

    for(int i = 0; i < AC_DIRECTIONAL_LIGHTS.length ; ++i) {
        float3 L = normalize(AC_DIRECTIONAL_LIGHTS[i]);

        // diffuse term
        float diffuseTerm = max(dot(N,L),0);
        myDiffuseColor += AC_DIRECTIONAL_LIGHTS_DIFFUSE_COLOR[i] * diffuseTerm;

        // specular term
        if (diffuseTerm > 0.0) {
#ifdef PHONG_SPECULAR
            float3 R = 2 * dot(N, L) * N - L;
            float specularTerm = pow(max(dot(R, V), 0), shininess);
#else
            float3 H = normalize(L + V);
            float specularTerm = 2.5 * specularrolloff * pow(saturate(dot(N,H)), 1/pow(eccentricity, 2.5));
#endif
            mySpecColor += specularTerm * AC_DIRECTIONAL_LIGHTS_SPECULAR_COLOR[i]; // * diffuseTerm;
        }
    }
#ifdef POSITIONAL_LIGHTS
    for (int i = 0; i < AC_POSITIONAL_LIGHTS.length ; ++i) {
        float3 L = normalize(AC_POSITIONAL_LIGHTS[i] - P);

        // diffuse term
        float diffuseTerm = max(dot(N,L),0);
        myDiffuseColor += AC_POSITIONAL_LIGHTS_DIFFUSE_COLOR[i] * diffuseTerm;

        // specular term
        if (diffuseTerm > 0.0) {
#ifdef PHONG_SPECULAR
            float3 R = 2 * dot(N, L) * N - L;
            float specularTerm = pow(max(dot(R, V), 0), shininess);
#else
            float3 H = normalize(L + V);
            float specularTerm = 2.5 * specularrolloff * pow(saturate(dot(N,H)), 1/pow(eccentricity, 2.5));
#endif
            mySpecColor += specularTerm * AC_POSITIONAL_LIGHTS_SPECULAR_COLOR[i];
        }
    }
#endif
#endif

    float3 myEnvColor  =  (myEnvTexel.rgb * myEmissiveTexel.rgb) * IN.reflectionFactor;
    float4 myBaseColor = ambient + myDiffuseColor * diffuse + mySpecColor * specular;
    float  myEnvIntensity = (myEnvColor.r + myEnvColor.g + myEnvColor.b) / 3.0;
    float3 myBlendedColor = lerp(myBaseColor.rgb, float3(1), myEnvIntensity);

#ifdef OCCLUSION
    float myOcclusionTexel = tex2D(occlusionTex, IN.texCoord0).r;
    return float4(myBlendedColor.rgb * myOcclusionTexel, 1);
#else
    return float4(myBlendedColor.rgb, 1);
#endif

    // *************** Some debug options *********************

	// Lighting
	//return float4(myDiffuseColor.rgb, 1);

    // Fresnel Effect
    //return float4(IN.reflectionFactor, IN.reflectionFactor,IN.reflectionFactor,1);

	// Lackfarbe plus occlusion
	//return float4((diffuse * myOcclusionTexel).rgb, 1);

	// Lit diffuse color plus occlusion
	//return float4(myDiffuseColor.rgb, 1);

    // The specular color
    // return float4(mySpecColor.rgb, 1);

    // The occlusion map
    //return float4(myOcclusionTexel.rgb, 1);

    // The diffuse color
    // return float4(diffuse.rgb, 1);
    // return float4(myDiffuseColor.rgb, 1);

    // return diffuse + (myEmissiveTexel + myEnvTexel) * IN.reflectionFactor;

    // The color plus emissive environment
    // return myColor + myEmissiveTexel * IN.reflectionFactor;

    // The emissive color
    // return float4(myEmissiveTexel.rgb,1);

    // The environment color
    // return float4(myEnvTexel.rgb, 1);

    // The lit color
    // return float4(myBaseColor.rgb, 1);

    // The environment
    // return float4(myEnvColor,1);
}
