/* __ ___ ____ _____ ______ _______ ________ _______ ______ _____ ____ ___ __
//
// Copyright (C) 1993-2008, ART+COM AG Berlin, Germany <www.artcom.de>
//
// These coded instructions, statements, and computer programs contain
// proprietary information of ART+COM AG Berlin, and are copy protected
// by law. They may be used, modified and redistributed under the terms
// of GNU General Public License referenced below. 
//    
// Alternative licensing without the obligations of the GPL is
// available upon request.
//
// GPL v3 Licensing:
//
// This file is part of the ART+COM Y60 Platform.
//
// ART+COM Y60 is free software: you can redistribute it and/or modify
// it under the terms of the GNU General Public License as published by
// the Free Software Foundation, either version 3 of the License, or
// (at your option) any later version.

// ART+COM Y60 is distributed in the hope that it will be useful,
// but WITHOUT ANY WARRANTY; without even the implied warranty of
// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
// GNU General Public License for more details.

// You should have received a copy of the GNU General Public License
// along with ART+COM Y60.  If not, see <http://www.gnu.org/licenses/>.
// __ ___ ____ _____ ______ _______ ________ _______ ______ _____ ____ ___ __
//
// Description: TODO  
//
// Last Review: NEVER, NOONE
//
//  review status report: (perfect, ok, fair, poor, disaster, notapplicable, unknown)
//    usefullness            : unknown
//    formatting             : unknown
//    documentation          : unknown
//    test coverage          : unknown
//    names                  : unknown
//    style guide conformance: unknown
//    technical soundness    : unknown
//    dead code              : unknown
//    readability            : unknown
//    understandabilty       : unknown
//    interfaces             : unknown
//    confidence             : unknown
//    integration            : unknown
//    dependencies           : unknown
//    cheesyness             : unknown
//
//    overall review status  : unknown
//
//    recommendations: 
//       - unknown
// __ ___ ____ _____ ______ _______ ________ _______ ______ _____ ____ ___ __
*/

#include "JSSignals.h"

namespace jslib {

template <class R>
bool convertFrom(JSContext *cx, jsval theValue, asl::Ptr<sigc::signal0<R> > & theOwner) {
    if (JSVAL_IS_OBJECT(theValue)) {
        JSObject * myArgument;
        if (JS_ValueToObject(cx, theValue, &myArgument)) {
            if (JSA_GetClass(cx,myArgument) ==
                        JSClassTraits<typename JSSignal0<R>::NATIVE >::Class())
            {
                theOwner =
                    JSClassTraits<typename JSSignal0<R>::NATIVE>::getNativeOwner(cx,myArgument);
                return true;
            }
        }
    }
    return false;
}

template <class R, class P0>
bool convertFrom(JSContext *cx, jsval theValue, asl::Ptr<sigc::signal1<R, P0> > & theOwner) {
    if (JSVAL_IS_OBJECT(theValue)) {
        JSObject * myArgument;
        if (JS_ValueToObject(cx, theValue, &myArgument)) {
            if (JSA_GetClass(cx,myArgument) ==
                        JSClassTraits<typename JSSignal1<R, P0>::NATIVE >::Class())
            {
                theOwner =
                    JSClassTraits<typename JSSignal1<R, P0>::NATIVE>::getNativeOwner(cx,myArgument);
                return true;
            }
        }
    }
    return false;
}

template <class R, class P0, class P1>
bool convertFrom(JSContext *cx, jsval theValue, asl::Ptr<sigc::signal2<R, P0, P1> > & theOwner) {
    if (JSVAL_IS_OBJECT(theValue)) {
        JSObject * myArgument;
        if (JS_ValueToObject(cx, theValue, &myArgument)) {
            if (JSA_GetClass(cx,myArgument) ==
                        JSClassTraits<typename JSSignal2<R, P0, P1>::NATIVE >::Class())
            {
                theOwner =
                    JSClassTraits<typename JSSignal2<R, P0, P1>::NATIVE>::getNativeOwner(cx,myArgument);
                return true;
            }
        }
    }
    return false;
}

template <class R, class P0, class P1, class P2>
bool convertFrom(JSContext *cx, jsval theValue, asl::Ptr<sigc::signal3<R, P0, P1, P2> > & theOwner) {
    if (JSVAL_IS_OBJECT(theValue)) {
        JSObject * myArgument;
        if (JS_ValueToObject(cx, theValue, &myArgument)) {
            if (JSA_GetClass(cx,myArgument) ==
                        JSClassTraits<typename JSSignal3<R, P0, P1, P2>::NATIVE >::Class())
            {
                theOwner =
                    JSClassTraits<typename JSSignal3<R, P0, P1, P2>::NATIVE>::getNativeOwner(cx,myArgument);
                return true;
            }
        }
    }
    return false;
}


#define INSTANTIATE_SIGNAL0_WRAPPER(R) \
    template class JSWrapper<sigc::signal0<R>, asl::Ptr<sigc::signal0<R> >, \
            StaticAccessProtocol>; \
    template bool convertFrom(JSContext *cx, jsval theValue, \
            asl::Ptr<sigc::signal0<R> > & theOwner);

#define INSTANTIATE_SIGNAL1_WRAPPER(R, P0) \
    template class JSWrapper<sigc::signal1<R, P0>, asl::Ptr<sigc::signal1<R, P0> >, \
        StaticAccessProtocol>; \
    template bool convertFrom(JSContext *cx, jsval theValue, \
            asl::Ptr<sigc::signal1<R, P0> > & theOwner);

#define INSTANTIATE_SIGNAL2_WRAPPER(R, P0, P1) \
    template class JSWrapper<sigc::signal2<R, P0, P1>, asl::Ptr<sigc::signal2<R, P0, P1> >, \
        StaticAccessProtocol>; \
    template bool convertFrom(JSContext *cx, jsval theValue, \
            asl::Ptr<sigc::signal2<R, P0, P1> > & theOwner);


#define INSTANTIATE_SIGNAL3_WRAPPER(R, P0, P1, P2) \
    template class JSWrapper<sigc::signal3<R, P0, P1, P2>, asl::Ptr<sigc::signal3<R, P0, P1, P2> >, \
        StaticAccessProtocol>; \
    template bool convertFrom(JSContext *cx, jsval theValue, \
            asl::Ptr<sigc::signal3<R, P0, P1, P2> > & theOwner);
}
/* vim: set filetype=cpp : */
